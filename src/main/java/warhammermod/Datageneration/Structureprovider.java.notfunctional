package warhammermod.Datageneration;

import com.google.common.collect.ImmutableList;
import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricDynamicRegistryProvider;
import net.minecraft.block.Blocks;
import net.minecraft.registry.RegistryEntryLookup;
import net.minecraft.registry.RegistryKeys;
import net.minecraft.registry.RegistryWrapper;
import net.minecraft.registry.entry.RegistryEntry;
import net.minecraft.structure.processor.RuleStructureProcessor;
import net.minecraft.structure.processor.StructureProcessorList;
import net.minecraft.structure.processor.StructureProcessorRule;
import net.minecraft.structure.rule.AlwaysTrueRuleTest;
import net.minecraft.structure.rule.RandomBlockMatchRuleTest;
import warhammermod.utils.Registry.WHRegistry;
import warhammermod.utils.reference;


import java.util.concurrent.CompletableFuture;

public class Structureprovider extends FabricDynamicRegistryProvider {
    public Structureprovider(FabricDataOutput output, CompletableFuture<RegistryWrapper.WrapperLookup> registriesFuture) {
        super(output, registriesFuture);
    }

    @Override
    protected void configure(RegistryWrapper.WrapperLookup registries, Entries entries) {
        RegistryEntry<StructureProcessorList> test = entries.add(WHRegistry.DWARF_STREETS, new StructureProcessorList( ImmutableList.of(
                new RuleStructureProcessor(ImmutableList.of(
                        new StructureProcessorRule(new RandomBlockMatchRuleTest(Blocks.COBBLESTONE, 0.45F), AlwaysTrueRuleTest.INSTANCE, Blocks.ANDESITE.getDefaultState()),
                        new StructureProcessorRule(new RandomBlockMatchRuleTest(Blocks.GRAVEL,0.3F), AlwaysTrueRuleTest.INSTANCE, Blocks.ANDESITE.getDefaultState()))))
        ));
        DwarfVillagePools.bootstrap(registries,entries,test);
        RegistryEntryLookup<StructureProcessorList> placeholder = entries.getLookup(RegistryKeys.PROCESSOR_LIST);

    }

    @Override
    public String getName() {
        return reference.modid;
    }

}
